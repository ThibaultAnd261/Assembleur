


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui même)
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
    9 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   10 00000000         
   11 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   12 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   13 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   14 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   15 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   16 00000000         
   17 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   18 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   19 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   20 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   21 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   22 00000000         
   23 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   24 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   25 00000000         
   26 00000000         ; The GPIODATA register is the data register
   27 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   28 00000000         
   29 00000000         ; The GPIODATA register is the data register



ARM Macro Assembler    Page 2 


   30 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   31 00000000         
   32 00000000         ; The GPIODATA register is the data register
   33 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   34 00000000         
   35 00000000         ; configure the corresponding pin to be an output
   36 00000000         ; all GPIO pins are inputs by default
   37 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   38 00000000         
   39 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   40 00000000         ; By default, all GPIO pins have 2-mA drive.
   41 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   42 00000000         
   43 00000000         ; Digital enable register
   44 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   45 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   46 00000000         
   47 00000000         ; Pul_up
   48 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   49 00000000         
   50 00000000         ; Broches select
   51 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5
   52 00000000         
   53 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                            
   54 00000000         



ARM Macro Assembler    Page 3 


   55 00000000 00000080 
                       BROCHE7 EQU              0x80        ; bonton poussoir 2
                                                            
   56 00000000         
   57 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; bonton poussoir 1
                                                             et 2
   58 00000000         
   59 00000000 00000001 
                       BROCHE0 EQU              0x01        ;bumper droit
   60 00000000         
   61 00000000 00000002 
                       BROCHE1 EQU              0x02        ;bumper gauche
   62 00000000         
   63 00000000 00000003 
                       BROCHE1_2
                               EQU              0x03        ;bumper droit et ga
                                                            uche
   64 00000000         
   65 00000000         ; blinking frequency
   66 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF
   67 00000000         
   68 00000000                 ENTRY
   69 00000000                 EXPORT           __main
   70 00000000         
   71 00000000         
   72 00000000         
   73 00000000         
   74 00000000         __main
   75 00000000         
   76 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   77 00000000         ; ;;         
   78 00000000 4E56            ldr              r6, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   79 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b101
                                                            000)
   80 00000006         ; ;;                              (GPIO::FEDCBA)
   81 00000006 6030            str              r0, [r6]
   82 00000008         
   83 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   84 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   85 0000000A BF00            nop
   86 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   87 0000000E         
   88 0000000E         
   89 0000000E         ; Configure les PWM + GPIO
   90 0000000E F7FF FFFE       BL               MOTEUR_INIT
   91 00000012         
   92 00000012         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION LED



ARM Macro Assembler    Page 4 


   93 00000012         
   94 00000012 4E53            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   95 00000014 F04F 0030       ldr              r0, = BROCHE4_5
   96 00000018 6030            str              r0, [r6]
   97 0000001A         
   98 0000001A 4E52            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
   99 0000001C F04F 0030       ldr              r0, = BROCHE4_5
  100 00000020 6030            str              r0, [r6]
  101 00000022         
  102 00000022 4E51            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
  103 00000024 F04F 0030       ldr              r0, = BROCHE4_5
  104 00000028 6030            str              r0, [r6]
  105 0000002A         
  106 0000002A F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
  107 0000002E         
  108 0000002E         
  109 0000002E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION bumper droi
                       t et gauche
  110 0000002E         
  111 0000002E 4F4F            ldr              r7, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  112 00000030 F04F 0003       ldr              r0, = BROCHE1_2
  113 00000034 6038            str              r0, [r7]
  114 00000036         
  115 00000036 4F4E            ldr              r7, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  116 00000038 F04F 0003       ldr              r0, = BROCHE1_2
  117 0000003C 6038            str              r0, [r7]
  118 0000003E         
  119 0000003E         
  120 0000003E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1 
                       et 2
  121 0000003E         
  122 0000003E         ;ldr r8, = GPIO_PORTD_BASE+GPIO_I_PUR ;; Pul_up 
  123 0000003E         ;ldr r0, = BROCHE6_7 
  124 0000003E         ;str r0, [r8]
  125 0000003E         
  126 0000003E         ;ldr r8, = GPIO_PORTD_BASE+GPIO_O_DEN ;; Enable Digital 
                       Function 
  127 0000003E         ;ldr r0, = BROCHE6_7
  128 0000003E         ;str r0, [r8]
  129 0000003E         
  130 0000003E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1 
                       et 2



ARM Macro Assembler    Page 5 


  131 0000003E         
  132 0000003E         ;ldr r7, = GPIO_PORTD_BASE+GPIO_I_PUR ;; Pul_up 
  133 0000003E         ;ldr r0, = BROCHE6_7
  134 0000003E         ;str r0, [r7]
  135 0000003E         
  136 0000003E         ;ldr r7, = GPIO_PORTD_BASE+GPIO_O_DEN ;; Enable Digital 
                       Function 
  137 0000003E         ;ldr r0, = BROCHE6_7 
  138 0000003E         ;str r0, [r7]     
  139 0000003E         
  140 0000003E         ;ldr r7, = GPIO_PORTD_BASE + (BROCHE6_7<<2)  ;; @data Re
                       gister = @base + (mask<<2) ==> Switcher
  141 0000003E         
  142 0000003E         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher 
  143 0000003E         
  144 0000003E         ;phase de mise en grille
  145 0000003E         ; Activer les deux moteurs droit et gauche
  146 0000003E         
  147 0000003E         PLACEMENT
  148 0000003E F7FF FFFE       BL               MOTEUR_DROIT_ON
  149 00000042 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  150 00000046         ; Evalbot avance droit devant
  151 00000046 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  152 0000004A F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  153 0000004E F000 F840       BL               WAITmg
  154 00000052         
  155 00000052 F000 F84E       BL               WAITstart
  156 00000056         
  157 00000056 E7F2            b                PLACEMENT
  158 00000058         
  159 00000058         ;phase de course
  160 00000058         loop
  161 00000058 F04F 0300       mov              r3, #0      ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000  
  162 0000005C 4E45            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  163 0000005E 6033            str              r3, [r6]    ;mov r3, #0x000
  164 00000060         ; Activer les deux moteurs droit et gauche
  165 00000060 F7FF FFFE       BL               MOTEUR_DROIT_ON
  166 00000064 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  167 00000068         ; Evalbot avance droit devant
  168 00000068 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  169 0000006C F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  170 00000070         
  171 00000070 F000 F849       BL               WAIT
  172 00000074         
  173 00000074 E7F0            b                loop
  174 00000076         
  175 00000076         BD_actif
  176 00000076         
  177 00000076 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  178 0000007A F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  179 0000007E F000 F858       BL               WAITar
  180 00000082 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  181 00000086 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE



ARM Macro Assembler    Page 6 


  182 0000008A F000 F85A       BL               WAITtourne
  183 0000008E E7E3            b                loop
  184 00000090         
  185 00000090         BG_actif
  186 00000090         
  187 00000090 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  188 00000094 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  189 00000098 F000 F84B       BL               WAITar
  190 0000009C F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  191 000000A0 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  192 000000A4 F000 F84D       BL               WAITtourne
  193 000000A8 E7D6            b                loop
  194 000000AA         
  195 000000AA         B_actif_depart
  196 000000AA         
  197 000000AA F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  198 000000AE F7FF FFFE       BL               MOTEUR_DROIT_OFF
  199 000000B2         
  200 000000B2 E01E            b                WAITstart
  201 000000B4         
  202 000000B4         SW1_actif
  203 000000B4         
  204 000000B4 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  205 000000B8 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  206 000000BC F000 F845       BL               WAIToff
  207 000000C0 E7F8            b                SW1_actif
  208 000000C2         
  209 000000C2         SW2_actif
  210 000000C2 492D            ldr              r1, =0xFAAAAA
  211 000000C4         ; allumer la led broche 4 et 5 (BROCHE4_5)
  212 000000C4 F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000  
  213 000000C8 4E2A            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  214 000000CA 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  215 000000CC         wait4
  216 000000CC 3901            subs             r1, #1
  217 000000CE D1FD            bne              wait4
  218 000000D0 E7C2            b                loop
  219 000000D2         
  220 000000D2         ;; Boucle d'attente pour la mise en grille
  221 000000D2         WAITmg
  222 000000D2 492A            ldr              r1, =0xAFFFFF
  223 000000D4         wait5
  224 000000D4 4F2A            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
0<<2)
  225 000000D6 F8D7 A000       ldr              r10,[r7]
  226 000000DA F1BA 0F00       CMP              r10,#0x00
  227 000000DE D0E4            BEQ              B_actif_depart
  228 000000E0         
  229 000000E0 4F28            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
1<<2)



ARM Macro Assembler    Page 7 


  230 000000E2 F8D7 A000       ldr              r10,[r7]
  231 000000E6 F1BA 0F00       CMP              r10,#0x00
  232 000000EA D0DE            BEQ              B_actif_depart
  233 000000EC         
  234 000000EC 3901            subs             r1, #1
  235 000000EE D1F1            bne              wait5
  236 000000F0 E7A5            b                PLACEMENT
  237 000000F2         
  238 000000F2         ;; Boucle d'attente pour le départ
  239 000000F2         WAITstart
  240 000000F2 4922            ldr              r1, =0xAFFFFF
  241 000000F4         wait
  242 000000F4 4F24            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
7<<2)
  243 000000F6 F8D7 A000       ldr              r10,[r7]
  244 000000FA F1BA 0F00       CMP              r10,#0x00
  245 000000FE D0E0            BEQ              SW2_actif
  246 00000100         
  247 00000100 3901            subs             r1, #1
  248 00000102 D1F7            bne              wait
  249 00000104 E7F5            b                WAITstart
  250 00000106         
  251 00000106         ;; Boucle d'attente pour la marche avant
  252 00000106 491D    WAIT    ldr              r1, =0xAFFFFF
  253 00000108         wait1
  254 00000108 4F1D            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
0<<2)
  255 0000010A F8D7 A000       ldr              r10,[r7]
  256 0000010E F1BA 0F00       CMP              r10,#0x00
  257 00000112 D0B0            BEQ              BD_actif
  258 00000114         
  259 00000114 4F1B            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
1<<2)
  260 00000116 F8D7 A000       ldr              r10,[r7]
  261 0000011A F1BA 0F00       CMP              r10,#0x00
  262 0000011E D0B7            BEQ              BG_actif
  263 00000120         
  264 00000120 4F1A            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6<<2)
  265 00000122 F8D7 A000       ldr              r10,[r7]
  266 00000126 F1BA 0F00       CMP              r10,#0x00
  267 0000012A D0C3            BEQ              SW1_actif
  268 0000012C         
  269 0000012C 3901            subs             r1, #1
  270 0000012E D1EB            bne              wait1
  271 00000130         
  272 00000130         ;; retour à la suite du lien de branchement
  273 00000130 4770            BX               LR
  274 00000132         
  275 00000132         ;; Boucle d'attente lors la marche arrière
  276 00000132 4917    WAITar  ldr              r1, =0x105FFF
  277 00000134         wait2
  278 00000134         ; allumer la led broche 4 et 5 (BROCHE4_5)
  279 00000134 F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000  
  280 00000138 4E0E            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =



ARM Macro Assembler    Page 8 


                                                             @base + (mask<<2) 
                                                            ==> LED1
  281 0000013A 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  282 0000013C         
  283 0000013C 3901            subs             r1, #1
  284 0000013E D1F9            bne              wait2
  285 00000140         
  286 00000140         ;; retour à la suite du lien de branchement
  287 00000140 4770            BX               LR
  288 00000142         
  289 00000142         
  290 00000142         ;; Boucle d'attente lors la marche arrière
  291 00000142         WAITtourne
  292 00000142 4914            ldr              r1, =0x35FFFF
  293 00000144         wait3
  294 00000144 3901            subs             r1, #1
  295 00000146 D1FD            bne              wait3
  296 00000148         
  297 00000148         ;; retour à la suite du lien de branchement
  298 00000148 4770            BX               LR
  299 0000014A         
  300 0000014A         WAIToff
  301 0000014A 4F10            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6<<2)
  302 0000014C F8D7 A000       ldr              r10,[r7]
  303 00000150 F1BA 0F00       CMP              r10,#0x00
  304 00000154 D080            BEQ              loop
  305 00000156         
  306 00000156         ;; retour à la suite du lien de branchement
  307 00000156 4770            BX               LR
  308 00000158         
  309 00000158 BF00            NOP
  310 0000015A                 END
              00 00 400FE108 
              40025400 
              4002551C 
              40025500 
              40024510 
              4002451C 
              400250C0 
              00FAAAAA 
              00AFFFFF 
              40024004 
              40024008 
              40007200 
              40007100 
              00105FFF 
              0035FFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\script.d -o.\objects\script.o -I.\RTE\_Target_1 -IC:\Use
rs\antoi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\
antoi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --prede
fine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VER
SION SETA 528" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\
listings\script.lst script.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file script.s
   Uses
      None
Comment: .text unused
BD_actif 00000076

Symbol: BD_actif
   Definitions
      At line 175 in file script.s
   Uses
      At line 257 in file script.s
Comment: BD_actif used once
BG_actif 00000090

Symbol: BG_actif
   Definitions
      At line 185 in file script.s
   Uses
      At line 262 in file script.s
Comment: BG_actif used once
B_actif_depart 000000AA

Symbol: B_actif_depart
   Definitions
      At line 195 in file script.s
   Uses
      At line 227 in file script.s
      At line 232 in file script.s

PLACEMENT 0000003E

Symbol: PLACEMENT
   Definitions
      At line 147 in file script.s
   Uses
      At line 157 in file script.s
      At line 236 in file script.s

SW1_actif 000000B4

Symbol: SW1_actif
   Definitions
      At line 202 in file script.s
   Uses
      At line 207 in file script.s
      At line 267 in file script.s

SW2_actif 000000C2

Symbol: SW2_actif
   Definitions
      At line 209 in file script.s
   Uses
      At line 245 in file script.s
Comment: SW2_actif used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

WAIT 00000106

Symbol: WAIT
   Definitions
      At line 252 in file script.s
   Uses
      At line 171 in file script.s
Comment: WAIT used once
WAITar 00000132

Symbol: WAITar
   Definitions
      At line 276 in file script.s
   Uses
      At line 179 in file script.s
      At line 189 in file script.s

WAITmg 000000D2

Symbol: WAITmg
   Definitions
      At line 221 in file script.s
   Uses
      At line 153 in file script.s
Comment: WAITmg used once
WAIToff 0000014A

Symbol: WAIToff
   Definitions
      At line 300 in file script.s
   Uses
      At line 206 in file script.s
Comment: WAIToff used once
WAITstart 000000F2

Symbol: WAITstart
   Definitions
      At line 239 in file script.s
   Uses
      At line 155 in file script.s
      At line 200 in file script.s
      At line 249 in file script.s

WAITtourne 00000142

Symbol: WAITtourne
   Definitions
      At line 291 in file script.s
   Uses
      At line 182 in file script.s
      At line 192 in file script.s

__main 00000000

Symbol: __main
   Definitions
      At line 74 in file script.s
   Uses
      At line 69 in file script.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: __main used once
loop 00000058

Symbol: loop
   Definitions
      At line 160 in file script.s
   Uses
      At line 173 in file script.s
      At line 183 in file script.s
      At line 193 in file script.s
      At line 218 in file script.s
      At line 304 in file script.s

wait 000000F4

Symbol: wait
   Definitions
      At line 241 in file script.s
   Uses
      At line 248 in file script.s
Comment: wait used once
wait1 00000108

Symbol: wait1
   Definitions
      At line 253 in file script.s
   Uses
      At line 270 in file script.s
Comment: wait1 used once
wait2 00000134

Symbol: wait2
   Definitions
      At line 277 in file script.s
   Uses
      At line 284 in file script.s
Comment: wait2 used once
wait3 00000144

Symbol: wait3
   Definitions
      At line 293 in file script.s
   Uses
      At line 295 in file script.s
Comment: wait3 used once
wait4 000000CC

Symbol: wait4
   Definitions
      At line 215 in file script.s
   Uses
      At line 217 in file script.s
Comment: wait4 used once
wait5 000000D4

Symbol: wait5
   Definitions
      At line 223 in file script.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 235 in file script.s
Comment: wait5 used once
21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0 00000001

Symbol: BROCHE0
   Definitions
      At line 59 in file script.s
   Uses
      At line 224 in file script.s
      At line 254 in file script.s

BROCHE1 00000002

Symbol: BROCHE1
   Definitions
      At line 61 in file script.s
   Uses
      At line 229 in file script.s
      At line 259 in file script.s

BROCHE1_2 00000003

Symbol: BROCHE1_2
   Definitions
      At line 63 in file script.s
   Uses
      At line 112 in file script.s
      At line 116 in file script.s

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 51 in file script.s
   Uses
      At line 95 in file script.s
      At line 99 in file script.s
      At line 103 in file script.s
      At line 162 in file script.s
      At line 212 in file script.s
      At line 213 in file script.s
      At line 279 in file script.s
      At line 280 in file script.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 53 in file script.s
   Uses
      At line 264 in file script.s
      At line 301 in file script.s

BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 57 in file script.s
   Uses
      None
Comment: BROCHE6_7 unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

BROCHE7 00000080

Symbol: BROCHE7
   Definitions
      At line 55 in file script.s
   Uses
      At line 242 in file script.s
Comment: BROCHE7 used once
DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 66 in file script.s
   Uses
      None
Comment: DUREE unused
GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 48 in file script.s
   Uses
      At line 111 in file script.s
Comment: GPIO_I_PUR used once
GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 45 in file script.s
   Uses
      At line 98 in file script.s
      At line 115 in file script.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 37 in file script.s
   Uses
      At line 94 in file script.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 41 in file script.s
   Uses
      At line 102 in file script.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 30 in file script.s
   Uses
      At line 242 in file script.s
      At line 264 in file script.s
      At line 301 in file script.s




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 33 in file script.s
   Uses
      At line 111 in file script.s
      At line 115 in file script.s
      At line 224 in file script.s
      At line 229 in file script.s
      At line 254 in file script.s
      At line 259 in file script.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 27 in file script.s
   Uses
      At line 94 in file script.s
      At line 98 in file script.s
      At line 102 in file script.s
      At line 162 in file script.s
      At line 213 in file script.s
      At line 280 in file script.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 24 in file script.s
   Uses
      At line 78 in file script.s
Comment: SYSCTL_PERIPH_GPIO used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 14 in file script.s
   Uses
      At line 177 in file script.s
      At line 187 in file script.s
      At line 191 in file script.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 13 in file script.s
   Uses
      At line 151 in file script.s
      At line 168 in file script.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 15 in file script.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 12 in file script.s
   Uses
      At line 180 in file script.s
      At line 198 in file script.s
      At line 204 in file script.s

MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 11 in file script.s
   Uses
      At line 148 in file script.s
      At line 165 in file script.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 20 in file script.s
   Uses
      At line 178 in file script.s
      At line 181 in file script.s
      At line 188 in file script.s

MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 19 in file script.s
   Uses
      At line 152 in file script.s
      At line 169 in file script.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 21 in file script.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 18 in file script.s
   Uses
      At line 190 in file script.s
      At line 197 in file script.s
      At line 205 in file script.s

MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 17 in file script.s
   Uses
      At line 149 in file script.s
      At line 166 in file script.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 9 in file script.s
   Uses
      At line 90 in file script.s
Comment: MOTEUR_INIT used once
11 symbols
385 symbols in table
