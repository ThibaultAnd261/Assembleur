


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui même)
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
    9 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   10 00000000         
   11 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   12 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   13 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   14 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   15 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   16 00000000         
   17 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   18 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   19 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   20 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   21 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   22 00000000         
   23 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   24 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   25 00000000         
   26 00000000         ; The GPIODATA register is the data register
   27 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   28 00000000         
   29 00000000         ; The GPIODATA register is the data register



ARM Macro Assembler    Page 2 


   30 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   31 00000000         
   32 00000000         ; The GPIODATA register is the data register
   33 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   34 00000000         
   35 00000000         ; configure the corresponding pin to be an output
   36 00000000         ; all GPIO pins are inputs by default
   37 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   38 00000000         
   39 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   40 00000000         ; By default, all GPIO pins have 2-mA drive.
   41 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   42 00000000         
   43 00000000         ; Digital enable register
   44 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   45 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   46 00000000         
   47 00000000         ; Pul_up
   48 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   49 00000000         
   50 00000000         ; Broches select
   51 00000000 00000030 
                       BROCHE4_5
                               EQU              0x30        ; led1 & led2 sur b
                                                            roche 4 et 5
   52 00000000         
   53 00000000 00000040 
                       BROCHE6 EQU              0x40        ; bouton poussoir 1
                                                            
   54 00000000         



ARM Macro Assembler    Page 3 


   55 00000000 00000080 
                       BROCHE7 EQU              0x80        ; bouton poussoir 2
                                                            
   56 00000000         
   57 00000000 000000C0 
                       BROCHE6_7
                               EQU              0xC0        ; bouton poussoir 1
                                                             et 2
   58 00000000         
   59 00000000 00000001 
                       BROCHE0 EQU              0x01        ;bumper droit
   60 00000000         
   61 00000000 00000002 
                       BROCHE1 EQU              0x02        ;bumper gauche
   62 00000000         
   63 00000000 00000003 
                       BROCHE1_2
                               EQU              0x03        ;bumper droit et ga
                                                            uche
   64 00000000         
   65 00000000         ; blinking frequency
   66 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF
   67 00000000         
   68 00000000                 ENTRY
   69 00000000                 EXPORT           __main
   70 00000000         
   71 00000000         
   72 00000000         
   73 00000000         
   74 00000000         __main
   75 00000000         
   76 00000000         ; ;; Enable the Port F & D peripheral clock   (p291 data
                       sheet de lm3s9B96.pdf)
   77 00000000         ; ;;         
   78 00000000 4E6D            ldr              r6, = SYSCTL_PERIPH_GPIO
   79 00000002         ;; RCGC2
   80 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b101
                                                            000)
   81 00000006         ; ;;                              (GPIO::FEDCBA)
   82 00000006 6030            str              r0, [r6]
   83 00000008         
   84 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   85 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   86 0000000A BF00            nop
   87 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   88 0000000E         
   89 0000000E         
   90 0000000E         ; Configure les PWM + GPIO
   91 0000000E F7FF FFFE       BL               MOTEUR_INIT
   92 00000012         
   93 00000012         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION LED



ARM Macro Assembler    Page 4 


   94 00000012         
   95 00000012 4E6A            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R 
                                                            ;; 1 Pin du portF e
                                                            n sortie (broche 4 
                                                            : 00010000)
   96 00000014 F04F 0030       ldr              r0, = BROCHE4_5
   97 00000018 6030            str              r0, [r6]
   98 0000001A         
   99 0000001A 4E69            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  100 0000001C F04F 0030       ldr              r0, = BROCHE4_5
  101 00000020 6030            str              r0, [r6]
  102 00000022         
  103 00000022 4E68            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R 
                                                            ;; Choix de l'inten
                                                            sité de sortie (2mA
                                                            )
  104 00000024 F04F 0030       ldr              r0, = BROCHE4_5
  105 00000028 6030            str              r0, [r6]
  106 0000002A         
  107 0000002A F04F 0200       mov              r2, #0x000  ;; pour eteindre LE
                                                            D
  108 0000002E         
  109 0000002E         
  110 0000002E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION bumper droi
                       t et gauche
  111 0000002E         
  112 0000002E 4F66            ldr              r7, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  113 00000030 F04F 0003       ldr              r0, = BROCHE1_2
  114 00000034 6038            str              r0, [r7]
  115 00000036         
  116 00000036 4F65            ldr              r7, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  117 00000038 F04F 0003       ldr              r0, = BROCHE1_2
  118 0000003C 6038            str              r0, [r7]
  119 0000003E         
  120 0000003E         
  121 0000003E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1 
                       et 2
  122 0000003E         
  123 0000003E 4F64            ldr              r7, = GPIO_PORTD_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  124 00000040 F04F 00C0       ldr              r0, = BROCHE6_7
  125 00000044 6038            str              r0, [r7]
  126 00000046         
  127 00000046 4F63            ldr              r7, = GPIO_PORTD_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  128 00000048 F04F 00C0       ldr              r0, = BROCHE6_7



ARM Macro Assembler    Page 5 


  129 0000004C 6038            str              r0, [r7]
  130 0000004E         
  131 0000004E 4F62            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6_7<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  132 00000050         
  133 00000050         
  134 00000050         
  135 00000050         
  136 00000050         PLACEMENT
  137 00000050         ;phase de mise en grille
  138 00000050         ;Activer les deux moteurs droit et gauche
  139 00000050 F7FF FFFE       BL               MOTEUR_INIT
  140 00000054 F7FF FFFE       BL               MOTEUR_DROIT_ON
  141 00000058 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  142 0000005C         ; Evalbot avance droit devant
  143 0000005C F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  144 00000060 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  145 00000064 F000 F85B       BL               WAITmg      ; entre dans WAITst
                                                            art ssi bumper acti
                                                            vé
  146 00000068         
  147 00000068 F000 F869       BL               WAITstart   ; entre dans loop s
                                                            si appui sur switch
                                                            2
  148 0000006C         
  149 0000006C E7F0            b                PLACEMENT
  150 0000006E         
  151 0000006E         ;phase de course
  152 0000006E         loop
  153 0000006E F04F 0300       mov              r3, #0      ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000  
  154 00000072 4E5A            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  155 00000074 6033            str              r3, [r6]    ;mov r3, #0x000
  156 00000076         ; Activer les deux moteurs droit et gauche
  157 00000076 F7FF FFFE       BL               MOTEUR_DROIT_ON
  158 0000007A F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  159 0000007E         ; Evalbot avance droit devant
  160 0000007E F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  161 00000082 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  162 00000086         
  163 00000086 F000 F864       BL               WAIT        ; boucle principale
                                                             du mode course
  164 0000008A         
  165 0000008A E7F0            b                loop
  166 0000008C         
  167 0000008C         BD_actif
  168 0000008C         ; s'occupe du virage vers la gauche
  169 0000008C F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  170 00000090 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  171 00000094 F000 F87A       BL               WAITar      ;recule avant de to
                                                            urner



ARM Macro Assembler    Page 6 


  172 00000098 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  173 0000009C F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  174 000000A0 F000 F87C       BL               WAITtourne  ;temps du virage
  175 000000A4 E7E3            b                loop
  176 000000A6         
  177 000000A6         BG_actif
  178 000000A6         ; s'occupe du virage vers la droite
  179 000000A6 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  180 000000AA F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  181 000000AE F000 F86D       BL               WAITar      ;recule avant de to
                                                            urner
  182 000000B2 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  183 000000B6 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  184 000000BA F000 F86F       BL               WAITtourne  ;temps du virage
  185 000000BE E7D6            b                loop
  186 000000C0         
  187 000000C0         CELEBRATION                          ;rotation répétitiv
                                                            e lor de l'appui su
                                                            r le switch2
  188 000000C0         ; allumer la led broche 4 et 5 (BROCHE4_5)
  189 000000C0 F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000  
  190 000000C4 4E45            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  191 000000C6 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  192 000000C8 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  193 000000CC F7FF FFFE       BL               MOTEUR_DROIT_ON
  194 000000D0 F000 F81B       BL               WAITcelebration
  195 000000D4 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  196 000000D8 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  197 000000DC F000 F815       BL               WAITcelebration
  198 000000E0 E7EE            b                CELEBRATION
  199 000000E2         
  200 000000E2         B_actif_depart                       ;attend l'activatio
                                                            n de la procédure d
                                                            e départ
  201 000000E2         
  202 000000E2 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  203 000000E6 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  204 000000EA         
  205 000000EA E028            b                WAITstart
  206 000000EC         
  207 000000EC         SW1_actif                            ; met le mode pause
                                                            
  208 000000EC         
  209 000000EC F7FF FFFE       BL               MOTEUR_DROIT_OFF
  210 000000F0 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  211 000000F4 F000 F856       BL               WAIToff
  212 000000F8 E7F8            b                SW1_actif
  213 000000FA         
  214 000000FA         SW2_actif                            ; fais le décompte 
                                                            avant le départ



ARM Macro Assembler    Page 7 


  215 000000FA 4939            ldr              r1, =0xFAAAAA
  216 000000FC         ; allumer la led broche 4 et 5 (BROCHE4_5)
  217 000000FC F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000  
  218 00000100 4E36            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  219 00000102 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  220 00000104         wait4
  221 00000104 3901            subs             r1, #1
  222 00000106 D1FD            bne              wait4
  223 00000108 E7B1            b                loop
  224 0000010A         
  225 0000010A         ;; Boucle d'attente pour la celebration
  226 0000010A         WAITcelebration
  227 0000010A 4936            ldr              r1, =0x1CFFFF
  228 0000010C         wait6
  229 0000010C 4F36            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6<<2) 
                                                            ;vérifie l'appui su
                                                            r le switch1
  230 0000010E F8D7 A000       ldr              r10,[r7]
  231 00000112 F1BA 0F00       CMP              r10,#0x00
  232 00000116 D0AA            BEQ              loop
  233 00000118         
  234 00000118 3901            subs             r1, #1
  235 0000011A D1F7            bne              wait6
  236 0000011C         
  237 0000011C         ;; retour à la suite du lien de branchement
  238 0000011C 4770            BX               LR
  239 0000011E         
  240 0000011E         ;; Boucle d'attente pour la mise en grille
  241 0000011E         WAITmg
  242 0000011E 4933            ldr              r1, =0xAFFFFF
  243 00000120         wait5
  244 00000120 4F33            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
0<<2) 
                                                            ;vérifie l'appui su
                                                            r le bumper droit
  245 00000122 F8D7 A000       ldr              r10,[r7]
  246 00000126 F1BA 0F00       CMP              r10,#0x00
  247 0000012A D0DA            BEQ              B_actif_depart
  248 0000012C         
  249 0000012C 4F31            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
1<<2) 
                                                            ;;vérifie l'appui s
                                                            ur le bumper gauche
                                                            
  250 0000012E F8D7 A000       ldr              r10,[r7]
  251 00000132 F1BA 0F00       CMP              r10,#0x00
  252 00000136 D0D4            BEQ              B_actif_depart
  253 00000138         
  254 00000138 3901            subs             r1, #1



ARM Macro Assembler    Page 8 


  255 0000013A D1F1            bne              wait5
  256 0000013C E788            b                PLACEMENT
  257 0000013E         
  258 0000013E         ;; Boucle d'attente pour le départ
  259 0000013E         WAITstart
  260 0000013E 492B            ldr              r1, =0xAFFFFF
  261 00000140         wait
  262 00000140 4F2D            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
7<<2) 
                                                            ;;vérifie l'appui s
                                                            ur le switch2
  263 00000142 F8D7 A000       ldr              r10,[r7]
  264 00000146 F1BA 0F00       CMP              r10,#0x00
  265 0000014A D0D6            BEQ              SW2_actif
  266 0000014C         
  267 0000014C 3901            subs             r1, #1
  268 0000014E D1F7            bne              wait
  269 00000150 E7F5            b                WAITstart
  270 00000152         
  271 00000152         ;; Boucle d'attente pour la marche avant
  272 00000152 F06F 417F 
                       WAIT    ldr              r1, =0xFFFFFF
  273 00000156         wait1
  274 00000156 4F26            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
0<<2) 
                                                            ;vérifie l'appui su
                                                            r le bumper droit
  275 00000158 F8D7 A000       ldr              r10,[r7]
  276 0000015C F1BA 0F00       CMP              r10,#0x00
  277 00000160 D094            BEQ              BD_actif
  278 00000162         
  279 00000162 4F24            ldr              r7, = GPIO_PORTE_BASE + (BROCHE
1<<2) 
                                                            ;vérifie l'appui su
                                                            r le bumper gauche
  280 00000164 F8D7 A000       ldr              r10,[r7]
  281 00000168 F1BA 0F00       CMP              r10,#0x00
  282 0000016C D09B            BEQ              BG_actif
  283 0000016E         
  284 0000016E 4F1E            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6<<2) 
                                                            ;vérifie l'appui su
                                                            r le switch1
  285 00000170 F8D7 A000       ldr              r10,[r7]
  286 00000174 F1BA 0F00       CMP              r10,#0x00
  287 00000178 D0B8            BEQ              SW1_actif
  288 0000017A         
  289 0000017A 4F1F            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
7<<2) 
                                                            ;vérifie l'appui su
                                                            r le switch2
  290 0000017C F8D7 A000       ldr              r10,[r7]
  291 00000180 F1BA 0F00       CMP              r10,#0x00
  292 00000184 D09C            BEQ              CELEBRATION
  293 00000186         
  294 00000186 3901            subs             r1, #1
  295 00000188 D1E5            bne              wait1
  296 0000018A         
  297 0000018A         ;; retour à la suite du lien de branchement



ARM Macro Assembler    Page 9 


  298 0000018A 4770            BX               LR
  299 0000018C         
  300 0000018C         ;; Boucle d'attente lors la marche arrière
  301 0000018C 491B    WAITar  ldr              r1, =0x0A0FFF
  302 0000018E         wait2
  303 0000018E         ; allumer la led broche 4 et 5 (BROCHE4_5)
  304 0000018E F04F 0330       mov              r3, #BROCHE4_5 ;; Allume LED1&2
                                                             portF broche 4&5 :
                                                             00110000  
  305 00000192 4E12            ldr              r6, = GPIO_PORTF_BASE + (BROCHE
4_5<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> LED1
  306 00000194 6033            str              r3, [r6]    ;; Allume LED1&2 po
                                                            rtF broche 4&5 : 00
                                                            110000 (contenu de 
                                                            r3)
  307 00000196         
  308 00000196 3901            subs             r1, #1
  309 00000198 D1F9            bne              wait2
  310 0000019A         
  311 0000019A         ;; retour à la suite du lien de branchement
  312 0000019A 4770            BX               LR
  313 0000019C         
  314 0000019C         
  315 0000019C         ;; Boucle d'attente lors la marche arrière
  316 0000019C         WAITtourne
  317 0000019C 4918            ldr              r1, =0x38FFFF
  318 0000019E         wait3
  319 0000019E 3901            subs             r1, #1
  320 000001A0 D1FD            bne              wait3
  321 000001A2         
  322 000001A2         ;; retour à la suite du lien de branchement
  323 000001A2 4770            BX               LR
  324 000001A4         
  325 000001A4         WAIToff
  326 000001A4 4F10            ldr              r7, = GPIO_PORTD_BASE + (BROCHE
6<<2) 
                                                            ;vérifie l'appui su
                                                            r le switch1
  327 000001A6 F8D7 A000       ldr              r10,[r7]
  328 000001AA F1BA 0F00       CMP              r10,#0x00
  329 000001AE F43F AF5E       BEQ              loop
  330 000001B2         
  331 000001B2         ;; retour à la suite du lien de branchement
  332 000001B2 4770            BX               LR
  333 000001B4         
  334 000001B4 BF00            NOP
  335 000001B6                 END
              00 00 400FE108 
              40025400 
              4002551C 
              40025500 
              40024510 
              4002451C 
              40007510 
              4000751C 
              40007300 



ARM Macro Assembler    Page 10 


              400250C0 
              00FAAAAA 
              001CFFFF 
              40007100 
              00AFFFFF 
              40024004 
              40024008 
              40007200 
              000A0FFF 
              0038FFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\script.d -o.\objects\script.o -I.\RTE\_Target_1 -IC:\Use
rs\antoi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\
antoi\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --prede
fine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VER
SION SETA 528" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\
listings\script.lst script.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file script.s
   Uses
      None
Comment: .text unused
BD_actif 0000008C

Symbol: BD_actif
   Definitions
      At line 167 in file script.s
   Uses
      At line 277 in file script.s
Comment: BD_actif used once
BG_actif 000000A6

Symbol: BG_actif
   Definitions
      At line 177 in file script.s
   Uses
      At line 282 in file script.s
Comment: BG_actif used once
B_actif_depart 000000E2

Symbol: B_actif_depart
   Definitions
      At line 200 in file script.s
   Uses
      At line 247 in file script.s
      At line 252 in file script.s

CELEBRATION 000000C0

Symbol: CELEBRATION
   Definitions
      At line 187 in file script.s
   Uses
      At line 198 in file script.s
      At line 292 in file script.s

PLACEMENT 00000050

Symbol: PLACEMENT
   Definitions
      At line 136 in file script.s
   Uses
      At line 149 in file script.s
      At line 256 in file script.s

SW1_actif 000000EC

Symbol: SW1_actif
   Definitions
      At line 207 in file script.s
   Uses
      At line 212 in file script.s
      At line 287 in file script.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


SW2_actif 000000FA

Symbol: SW2_actif
   Definitions
      At line 214 in file script.s
   Uses
      At line 265 in file script.s
Comment: SW2_actif used once
WAIT 00000152

Symbol: WAIT
   Definitions
      At line 272 in file script.s
   Uses
      At line 163 in file script.s
Comment: WAIT used once
WAITar 0000018C

Symbol: WAITar
   Definitions
      At line 301 in file script.s
   Uses
      At line 171 in file script.s
      At line 181 in file script.s

WAITcelebration 0000010A

Symbol: WAITcelebration
   Definitions
      At line 226 in file script.s
   Uses
      At line 194 in file script.s
      At line 197 in file script.s

WAITmg 0000011E

Symbol: WAITmg
   Definitions
      At line 241 in file script.s
   Uses
      At line 145 in file script.s
Comment: WAITmg used once
WAIToff 000001A4

Symbol: WAIToff
   Definitions
      At line 325 in file script.s
   Uses
      At line 211 in file script.s
Comment: WAIToff used once
WAITstart 0000013E

Symbol: WAITstart
   Definitions
      At line 259 in file script.s
   Uses
      At line 147 in file script.s
      At line 205 in file script.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 269 in file script.s

WAITtourne 0000019C

Symbol: WAITtourne
   Definitions
      At line 316 in file script.s
   Uses
      At line 174 in file script.s
      At line 184 in file script.s

__main 00000000

Symbol: __main
   Definitions
      At line 74 in file script.s
   Uses
      At line 69 in file script.s
Comment: __main used once
loop 0000006E

Symbol: loop
   Definitions
      At line 152 in file script.s
   Uses
      At line 165 in file script.s
      At line 175 in file script.s
      At line 185 in file script.s
      At line 223 in file script.s
      At line 232 in file script.s
      At line 329 in file script.s

wait 00000140

Symbol: wait
   Definitions
      At line 261 in file script.s
   Uses
      At line 268 in file script.s
Comment: wait used once
wait1 00000156

Symbol: wait1
   Definitions
      At line 273 in file script.s
   Uses
      At line 295 in file script.s
Comment: wait1 used once
wait2 0000018E

Symbol: wait2
   Definitions
      At line 302 in file script.s
   Uses
      At line 309 in file script.s
Comment: wait2 used once
wait3 0000019E

Symbol: wait3



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 318 in file script.s
   Uses
      At line 320 in file script.s
Comment: wait3 used once
wait4 00000104

Symbol: wait4
   Definitions
      At line 220 in file script.s
   Uses
      At line 222 in file script.s
Comment: wait4 used once
wait5 00000120

Symbol: wait5
   Definitions
      At line 243 in file script.s
   Uses
      At line 255 in file script.s
Comment: wait5 used once
wait6 0000010C

Symbol: wait6
   Definitions
      At line 228 in file script.s
   Uses
      At line 235 in file script.s
Comment: wait6 used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BROCHE0 00000001

Symbol: BROCHE0
   Definitions
      At line 59 in file script.s
   Uses
      At line 244 in file script.s
      At line 274 in file script.s

BROCHE1 00000002

Symbol: BROCHE1
   Definitions
      At line 61 in file script.s
   Uses
      At line 249 in file script.s
      At line 279 in file script.s

BROCHE1_2 00000003

Symbol: BROCHE1_2
   Definitions
      At line 63 in file script.s
   Uses
      At line 113 in file script.s
      At line 117 in file script.s

BROCHE4_5 00000030

Symbol: BROCHE4_5
   Definitions
      At line 51 in file script.s
   Uses
      At line 96 in file script.s
      At line 100 in file script.s
      At line 104 in file script.s
      At line 154 in file script.s
      At line 189 in file script.s
      At line 190 in file script.s
      At line 217 in file script.s
      At line 218 in file script.s
      At line 304 in file script.s
      At line 305 in file script.s

BROCHE6 00000040

Symbol: BROCHE6
   Definitions
      At line 53 in file script.s
   Uses
      At line 229 in file script.s
      At line 284 in file script.s
      At line 326 in file script.s

BROCHE6_7 000000C0

Symbol: BROCHE6_7
   Definitions
      At line 57 in file script.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 124 in file script.s
      At line 128 in file script.s
      At line 131 in file script.s

BROCHE7 00000080

Symbol: BROCHE7
   Definitions
      At line 55 in file script.s
   Uses
      At line 262 in file script.s
      At line 289 in file script.s

DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 66 in file script.s
   Uses
      None
Comment: DUREE unused
GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 48 in file script.s
   Uses
      At line 112 in file script.s
      At line 123 in file script.s

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 45 in file script.s
   Uses
      At line 99 in file script.s
      At line 116 in file script.s
      At line 127 in file script.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 37 in file script.s
   Uses
      At line 95 in file script.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 41 in file script.s
   Uses
      At line 103 in file script.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 30 in file script.s
   Uses
      At line 123 in file script.s
      At line 127 in file script.s
      At line 131 in file script.s
      At line 229 in file script.s
      At line 262 in file script.s
      At line 284 in file script.s
      At line 289 in file script.s
      At line 326 in file script.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 33 in file script.s
   Uses
      At line 112 in file script.s
      At line 116 in file script.s
      At line 244 in file script.s
      At line 249 in file script.s
      At line 274 in file script.s
      At line 279 in file script.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 27 in file script.s
   Uses
      At line 95 in file script.s
      At line 99 in file script.s
      At line 103 in file script.s
      At line 154 in file script.s
      At line 190 in file script.s
      At line 218 in file script.s
      At line 305 in file script.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 24 in file script.s
   Uses
      At line 78 in file script.s
Comment: SYSCTL_PERIPH_GPIO used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 14 in file script.s
   Uses
      At line 169 in file script.s
      At line 179 in file script.s
      At line 183 in file script.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 13 in file script.s
   Uses
      At line 143 in file script.s
      At line 160 in file script.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 15 in file script.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 12 in file script.s
   Uses
      At line 172 in file script.s
      At line 196 in file script.s
      At line 203 in file script.s
      At line 209 in file script.s

MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 11 in file script.s
   Uses
      At line 140 in file script.s
      At line 157 in file script.s
      At line 193 in file script.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 20 in file script.s
   Uses
      At line 170 in file script.s
      At line 173 in file script.s
      At line 180 in file script.s

MOTEUR_GAUCHE_AVANT 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 19 in file script.s
   Uses
      At line 144 in file script.s
      At line 161 in file script.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 21 in file script.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 18 in file script.s
   Uses
      At line 182 in file script.s
      At line 192 in file script.s
      At line 202 in file script.s
      At line 210 in file script.s

MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 17 in file script.s
   Uses
      At line 141 in file script.s
      At line 158 in file script.s
      At line 195 in file script.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 9 in file script.s
   Uses
      At line 91 in file script.s
      At line 139 in file script.s

11 symbols
388 symbols in table
